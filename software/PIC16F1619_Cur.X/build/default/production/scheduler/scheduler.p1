Version 3.2 HI-TECH Software Intermediate Code
[v F52 `(v ~T0 @X0 0 tf ]
"24 scheduler/scheduler.c
[s S1 `*F52 1 `ui 1 `ui 1 `ui 1 ]
[n S1 _taskCB pTask delay period runMe ]
"126 scheduler/scheduler.h
[v _SCH_DeleteTask `(uc ~T0 @X0 0 ef1`Cuc ]
[v F38 `(v ~T0 @X0 0 tf ]
"161
[v _SCH_GoToSleep `(v ~T0 @X0 0 ef ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;stdbool.h: 12: typedef unsigned char bool;
[; ;scheduler.h: 36: void SCH_Init(void);
[; ;scheduler.h: 50: void SCH_Start(void);
[; ;scheduler.h: 63: void SCH_Update(void);
[; ;scheduler.h: 110: uint8_t SCH_AddTask(void (* pFunction)(void),
[; ;scheduler.h: 111: const uint16_t delay, const uint16_t period);
[; ;scheduler.h: 126: bool SCH_DeleteTask(const uint8_t taskIndex);
[; ;scheduler.h: 137: void SCH_DispatchTasks(void);
[; ;scheduler.h: 161: void SCH_GoToSleep(void);
[; ;scheduler.h: 181: void SCH_ReportStatus(void);
[; ;scheduler.c: 24: typedef struct _taskCB
[; ;scheduler.c: 25: {
[; ;scheduler.c: 26: void (* pTask)(void);
[; ;scheduler.c: 27: uint16_t delay;
[; ;scheduler.c: 29: uint16_t period;
[; ;scheduler.c: 31: uint16_t runMe;
[; ;scheduler.c: 32: } taskCB_t;
"35 scheduler/scheduler.c
[v _taskCBs `S1 ~T0 @X0 -> 2 `i s ]
[; ;scheduler.c: 35: static taskCB_t taskCBs[(2)];
"36
[v _errorCode `uc ~T0 @X0 1 s ]
[; ;scheduler.c: 36: static uint8_t errorCode;
"39
[v _SCH_Init `(v ~T0 @X0 1 ef ]
"40
{
[; ;scheduler.c: 39: void SCH_Init(void)
[; ;scheduler.c: 40: {
[e :U _SCH_Init ]
[f ]
"41
[v _i `uc ~T0 @X0 1 a ]
[; ;scheduler.c: 41: uint8_t i;
[; ;scheduler.c: 43: for (i = 0; i < (2); i++)
"43
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 2 `i 3  ]
[e $U 4  ]
"44
[e :U 3 ]
[; ;scheduler.c: 44: {
{
[; ;scheduler.c: 45: SCH_DeleteTask(i);
"45
[e ( _SCH_DeleteTask (1 _i ]
"46
}
"43
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 2 `i 3  ]
[e :U 4 ]
"46
}
[; ;scheduler.c: 46: }
[; ;scheduler.c: 49: errorCode = 0;
"49
[e = _errorCode -> -> 0 `i `uc ]
[; ;scheduler.c: 50: }
"50
[e :UE 2 ]
}
"52
[v _SCH_Update `(v ~T0 @X0 1 ef ]
"53
{
[; ;scheduler.c: 52: void SCH_Update(void)
[; ;scheduler.c: 53: {
[e :U _SCH_Update ]
[f ]
"54
[v _index `uc ~T0 @X0 1 a ]
[; ;scheduler.c: 54: uint8_t index;
[; ;scheduler.c: 57: for (index = 0; index < (2); index++)
"57
{
[e = _index -> -> 0 `i `uc ]
[e $ < -> _index `i -> 2 `i 7  ]
[e $U 8  ]
"58
[e :U 7 ]
[; ;scheduler.c: 58: {
{
[; ;scheduler.c: 60: if (taskCBs[index].pTask)
"60
[e $ ! != . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 0 -> -> 0 `i `*F52 10  ]
[; ;scheduler.c: 61: {
"61
{
[; ;scheduler.c: 62: if (taskCBs[index].delay == 0)
"62
[e $ ! == . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 1 -> -> 0 `i `ui 11  ]
[; ;scheduler.c: 63: {
"63
{
[; ;scheduler.c: 65: taskCBs[index].runMe += 1;
"65
[e =+ . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 3 -> -> 1 `i `ui ]
[; ;scheduler.c: 67: if (taskCBs[index].period)
"67
[e $ ! != . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 2 -> -> 0 `i `ui 12  ]
[; ;scheduler.c: 68: {
"68
{
[; ;scheduler.c: 70: taskCBs[index].delay = taskCBs[index].period;
"70
[e = . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 1 . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 2 ]
"71
}
[e :U 12 ]
"72
}
[; ;scheduler.c: 71: }
[; ;scheduler.c: 72: }
[e $U 13  ]
"73
[e :U 11 ]
[; ;scheduler.c: 73: else
[; ;scheduler.c: 74: {
"74
{
[; ;scheduler.c: 76: taskCBs[index].delay -= 1;
"76
[e =- . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 1 -> -> 1 `i `ui ]
"77
}
[e :U 13 ]
"78
}
[e :U 10 ]
"79
}
"57
[e ++ _index -> -> 1 `i `uc ]
[e $ < -> _index `i -> 2 `i 7  ]
[e :U 8 ]
"79
}
[; ;scheduler.c: 77: }
[; ;scheduler.c: 78: }
[; ;scheduler.c: 79: }
[; ;scheduler.c: 80: }
"80
[e :UE 6 ]
}
"82
[v _SCH_AddTask `(uc ~T0 @X0 1 ef3`*F38`Cui`Cui ]
"84
{
[; ;scheduler.c: 82: uint8_t SCH_AddTask(void (* pFunction)(void),
[; ;scheduler.c: 83: const uint16_t delay, const uint16_t peroid)
[; ;scheduler.c: 84: {
[e :U _SCH_AddTask ]
[v F65 `(v ~T0 @X0 0 tf ]
"82
[v _pFunction `*F65 ~T0 @X0 1 r1 ]
"83
[v _delay `Cui ~T0 @X0 1 r2 ]
[v _peroid `Cui ~T0 @X0 1 r3 ]
"84
[f ]
"85
[v _index `uc ~T0 @X0 1 a ]
[; ;scheduler.c: 85: uint8_t index = 0;
[e = _index -> -> 0 `i `uc ]
[; ;scheduler.c: 88: while ((taskCBs[index].pTask != 0) && (index < (2)))
"88
[e $U 15  ]
[e :U 16 ]
[; ;scheduler.c: 89: {
"89
{
[; ;scheduler.c: 90: index++;
"90
[e ++ _index -> -> 1 `i `uc ]
"91
}
[e :U 15 ]
"88
[e $ && != . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 0 -> -> 0 `i `*F52 < -> _index `i -> 2 `i 16  ]
[e :U 17 ]
[; ;scheduler.c: 91: }
[; ;scheduler.c: 94: if ((2) > index)
"94
[e $ ! > -> 2 `i -> _index `i 18  ]
[; ;scheduler.c: 95: {
"95
{
[; ;scheduler.c: 97: taskCBs[index].pTask = pFunction;
"97
[e = . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 0 _pFunction ]
[; ;scheduler.c: 98: taskCBs[index].delay = delay;
"98
[e = . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 1 _delay ]
[; ;scheduler.c: 99: taskCBs[index].period = peroid - 1;
"99
[e = . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 2 - _peroid -> -> 1 `i `ui ]
[; ;scheduler.c: 100: taskCBs[index].runMe = 0;
"100
[e = . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 3 -> -> 0 `i `ui ]
"101
}
[e :U 18 ]
[; ;scheduler.c: 101: }
[; ;scheduler.c: 103: return index;
"103
[e ) _index ]
[e $UE 14  ]
[; ;scheduler.c: 104: }
"104
[e :UE 14 ]
}
"106
[v _SCH_DeleteTask `(uc ~T0 @X0 1 ef1`Cuc ]
"107
{
[; ;scheduler.c: 106: bool SCH_DeleteTask(const uint8_t taskIndex)
[; ;scheduler.c: 107: {
[e :U _SCH_DeleteTask ]
"106
[v _taskIndex `Cuc ~T0 @X0 1 r1 ]
"107
[f ]
"108
[v _result `uc ~T0 @X0 1 a ]
[; ;scheduler.c: 108: bool result;
[; ;scheduler.c: 110: if (0x0 == taskCBs[taskIndex].pTask)
"110
[e $ ! == -> -> 0 `i `*F52 . *U + &U _taskCBs * -> _taskIndex `ux -> -> # *U &U _taskCBs `ui `ux 0 20  ]
[; ;scheduler.c: 111: {
"111
{
[; ;scheduler.c: 112: result = 0;
"112
[e = _result -> -> 0 `i `uc ]
"113
}
[; ;scheduler.c: 113: }
[e $U 21  ]
"114
[e :U 20 ]
[; ;scheduler.c: 114: else
[; ;scheduler.c: 115: {
"115
{
[; ;scheduler.c: 116: taskCBs[taskIndex].pTask = 0x0;
"116
[e = . *U + &U _taskCBs * -> _taskIndex `ux -> -> # *U &U _taskCBs `ui `ux 0 -> -> 0 `i `*F52 ]
[; ;scheduler.c: 117: taskCBs[taskIndex].delay = 0x0;
"117
[e = . *U + &U _taskCBs * -> _taskIndex `ux -> -> # *U &U _taskCBs `ui `ux 1 -> -> 0 `i `ui ]
[; ;scheduler.c: 118: taskCBs[taskIndex].period = 0x0;
"118
[e = . *U + &U _taskCBs * -> _taskIndex `ux -> -> # *U &U _taskCBs `ui `ux 2 -> -> 0 `i `ui ]
[; ;scheduler.c: 119: taskCBs[taskIndex].runMe = 0x0;
"119
[e = . *U + &U _taskCBs * -> _taskIndex `ux -> -> # *U &U _taskCBs `ui `ux 3 -> -> 0 `i `ui ]
[; ;scheduler.c: 121: result = 1;
"121
[e = _result -> -> 1 `i `uc ]
"122
}
[e :U 21 ]
[; ;scheduler.c: 122: }
[; ;scheduler.c: 124: return result;
"124
[e ) _result ]
[e $UE 19  ]
[; ;scheduler.c: 125: }
"125
[e :UE 19 ]
}
"127
[v _SCH_DispatchTasks `(v ~T0 @X0 1 ef ]
"128
{
[; ;scheduler.c: 127: void SCH_DispatchTasks(void)
[; ;scheduler.c: 128: {
[e :U _SCH_DispatchTasks ]
[f ]
"129
[v _index `uc ~T0 @X0 1 a ]
[; ;scheduler.c: 129: uint8_t index;
[; ;scheduler.c: 132: for (index = 0; index < (2); index++)
"132
{
[e = _index -> -> 0 `i `uc ]
[e $ < -> _index `i -> 2 `i 23  ]
[e $U 24  ]
"133
[e :U 23 ]
[; ;scheduler.c: 133: {
{
[; ;scheduler.c: 134: if (taskCBs[index].runMe > 0)
"134
[e $ ! > . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 3 -> -> 0 `i `ui 26  ]
[; ;scheduler.c: 135: {
"135
{
[; ;scheduler.c: 136: (*taskCBs[index].pTask)();
"136
[e ( *U . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 0 ..  ]
[; ;scheduler.c: 138: taskCBs[index].runMe -= 1;
"138
[e =- . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 3 -> -> 1 `i `ui ]
[; ;scheduler.c: 142: if (taskCBs[index].period == 0)
"142
[e $ ! == . *U + &U _taskCBs * -> _index `ux -> -> # *U &U _taskCBs `ui `ux 2 -> -> 0 `i `ui 27  ]
[; ;scheduler.c: 143: {
"143
{
[; ;scheduler.c: 144: SCH_DeleteTask(index);
"144
[e ( _SCH_DeleteTask (1 _index ]
"145
}
[e :U 27 ]
"146
}
[e :U 26 ]
"147
}
"132
[e ++ _index -> -> 1 `i `uc ]
[e $ < -> _index `i -> 2 `i 23  ]
[e :U 24 ]
"147
}
[; ;scheduler.c: 145: }
[; ;scheduler.c: 146: }
[; ;scheduler.c: 147: }
[; ;scheduler.c: 153: SCH_GoToSleep();
"153
[e ( _SCH_GoToSleep ..  ]
[; ;scheduler.c: 154: }
"154
[e :UE 22 ]
}
